// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// مدل کاربر ها
model Users {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  username     String     @unique
  phoneNumber  String
  address      String
  email        String     @unique
  hash         String
  imageProfile String?
  comments     Comments[] @relation("user to comments")
  role         String?    @default("user")
  replies      Reply[]    @relation("user to reply")
  // Comments     Comments[] @relation("user to comments")
}

// مدل یک دوره
model Course {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  category      String
  price         Int
  discount      Int
  discountPrice Int
  isFree        Boolean    @default(false)
  status        String     @default("active")
  time          String
  studentsCount Int?       @default(0)
  rank          Float?
  teacher       String
  comments      Comments[]
  subjects      Subjects[]
  shortName     String
  image         String
  Menues        Menues?    @relation(fields: [menuesId], references: [id])
  menuesId      String?    @db.ObjectId
}

// مدل کامنت های یک دوره
model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  body      String
  status    String?  @default("pending")
  Course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?  @db.ObjectId
  Users     Users?   @relation(fields: [userId], references: [id], name: "user to comments")
  userId    String?  @db.ObjectId
  replies   Reply[]
}

//  سرفصل های هر دوره
model Subjects {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  episodes Episode[] @relation("subject to episode")
  sortId   Int
  Course   Course?   @relation(fields: [courseId], references: [id])
  courseId String?   @db.ObjectId
}

model Episode {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  isFree    Boolean
  link      String?
  sortId    Int
  Subject   Subjects? @relation(fields: [subjectId], references: [id], name: "subject to episode")
  subjectId String?   @db.ObjectId
}

model Menues {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  category  String
  shortName String
  courses   Course[]
  subMenus  submenus[]
}

model submenus {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  shortName String
  Menues    Menues? @relation(fields: [menuesId], references: [id])
  menuesId  String? @db.ObjectId
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  Users     Users    @relation(fields: [userId], references: [id], name: "user to reply")
  userId    String   @db.ObjectId
  Comments  Comments @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
}
